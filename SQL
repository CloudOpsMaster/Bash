# FROM -> WHERE -> group by -> having -> distinct -> UNION order by

# UNIX TIME
SELECT (UNIX_TIMESTAMP(NOW())+60)*1000

# Repeating fields "distinct"
select distinct name from Person;

# count fields
select count(age) from Person;

# sum fields 
select sum(age) from Person;

# average field value
select avg(age) from Person;

# min or max value
select min(age) from Person;
select max(age) from Person;

# renaming fields
select name as m from Person;

# Put field "test"
select name, 'test' from Person;

# where between, get values
select age from Person where age between 25 and 35;
select age from Person where age >= 25 and  >= 35;

# where in values
select * from Person where age in ( 1, 2, 3, 4, 35, 24, 23, 26);

# where not in values
select * from Person where age not in ( 1, 2, 3, 4, 35, 24, 23, 26);

# where LIKE 
select * from Person where name LIKE 'Vasia';

# character escaping $
select * from Person where name LIKE 'V$%';

# find filds where values is null
select * from Person where age is null;
select * from Person where age is not null;

# Order by values or ascending or descending or column number
select * from Person order by age;
select * from Person order by asc;
select * from Person order by desc;
select * from Person order by name, age;
select * from Person order by 2;

# pooling requests UNION ( UNION ALL )
select name, age as 'number' from Person
union
select name, age from Person2
union
select name, age from Person3
order by name;

# geting data from multiple tables and using an alias ( usually for two tables )
select p.id, p.name, e.position from Person as p, Emploee as e where p.id = e.id;

# Using join
select p.id, p.name, e.position 
   from Person as p
     join Emploee as e on p.id = e.id;


# If table 1 have column id and table 2 have column id for connect tables use natural join
select * from Person as p
natural join Emploee as e;

# LEFT JOIN
SELECT u.id, u.name, d.name AS d_name
FROM users u
LEFT JOIN departments d ON u.d_id = d.id;
