# FROM -> WHERE -> group by -> having -> distinct -> UNION order by

# UNIX TIME
SELECT (UNIX_TIMESTAMP(NOW())+60)*1000

# Repeating fields "distinct"
select distinct name from Person;

# count fields
select count(age) from Person;

# sum fields 
select sum(age) from Person;

# average field value
select avg(age) from Person;

# min or max value
select min(age) from Person;
select max(age) from Person;

# renaming fields
select name as m from Person;

# Put field "test"
select name, 'test' from Person;

# where between, get values
select age from Person where age between 25 and 35;
select age from Person where age >= 25 and  >= 35;

# where in values
select * from Person where age in ( 1, 2, 3, 4, 35, 24, 23, 26);

# where not in values
select * from Person where age not in ( 1, 2, 3, 4, 35, 24, 23, 26);

# where LIKE 
select * from Person where name LIKE 'Vasia';

# character escaping $
select * from Person where name LIKE 'V$%';

# find filds where values is null
select * from Person where age is null;
select * from Person where age is not null;

# Order by values or ascending or descending or column number
select * from Person order by age;
select * from Person order by asc;
select * from Person order by desc;
select * from Person order by name, age;
select * from Person order by 2;

# pooling requests UNION ( UNION ALL )
select name, age as 'number' from Person
union
select name, age from Person2
union
select name, age from Person3
order by name;

# geting data from multiple tables and using an alias ( usually for two tables )
select p.id, p.name, e.position from Person as p, Emploee as e where p.id = e.id;

# Using join
select p.id, p.name, e.position 
   from Person as p
     join Emploee as e on p.id = e.id;


# If table 1 have column id and table 2 have column id for connect tables use natural join
select * from Person as p
natural join Emploee as e;

# LEFT JOIN
SELECT u.id, u.name, d.name AS d_name
FROM users u
LEFT JOIN departments d ON u.d_id = d.id;

# GROUP BY,  GROUP BY some fields "with rollup", WITH CUBE
SELECT * from Person GROUP BY name, age with rollup;
SELECT * from Person GROUP BY name, age with cube;

# EXISTS. NOT EXIST, ANY, SOME, ALL
SELECT *
FROM Customers
WHERE EXISTS (SELECT * FROM Orders 
                  WHERE Orders.CustomerId = Customers.Id)
                  
# Casting types (for example, from numeric to string) 
SELECT cast(name as char), cast(age as char) from Person;
 
# Using CASE
SELECT name,
       case
           WHEN age > 50 then 'old'
           WHEN age < 20 then 'young'
           ELSE 'middle'
           end
FROM Person           


SELECT * FROM Person where name = case when ( name is null ) then 'no name' else name end;
# the same 
SELECT * FROM Person where name = coalesce ( name, 'no Name'); 
SELECT * FROM Person where name = nullif ( name, '0'); 
SELECT * FROM Person WHERE (name, age) < ('Maks', 25);
SELECT * FROM Person WHERE (name, age) < (select name, age from Person where age = 25);

# INTERSECT Transact-SQL, который выводит одинаковые строки из первого, второго и последующих наборов данных
 SELECT tip, summa FROM test_table
        intersect
 SELECT tip, summa FROM test_table_two
 
# EXCEPT  Transact-SQL, который выводит только те данные из первого набора строк, которых нет во втором наборе.
 SELECT tip, summa FROM test_table
        except
 SELECT tip, summa FROM test_table_two
   
# INSERT
INSERT INTO Person (id, name, age) values ( 1, 'Vasia', 34);
INSERT INTO Person (id, name, age) select id + 1, name, age + 1 from Person where id = 7;
           
# DELETE
DELETE from Person where id = 7;
DELETE from Person where id = 7 and name is NULL;

# UPDATE 
UPDATE Person set age = 34 where id = 33;

# Trigger 
create trigger insertAdress before/after insert/update/delete on Person for each row insert into Address ( id, streat, address ) values ( 1, 'Shechenco', 3, new.id );
create trigger updateAdress after update on Person for each row insert into Address ( id, streat, address ) values ( 1, 'Shechenco', 3, old.id );

# Delete trigger
drop triggerr sommeTriggerr 

# Transaction 
USE SampleDb;

-- Начало транзакции
BEGIN TRANSACTION
    UPDATE Employee
        SET Id = 14568
        WHERE Id = 10102

    IF (@@error <> 0)
        -- Отменить транзакцию, если есть ошибки
        ROLLBACK
    
    UPDATE Works_on
        SET EmpId = 14568
        WHERE EmpId = 10102
    
    IF (@@error <> 0)
        ROLLBACK
-- Завершение транзакции
COMMIT
